<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Go语言学习 - 分类 - 马力神的博客</title><link>http://example.org/categories/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</link><description>Go语言学习 - 分类 - 马力神的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1045772673@qq.com (马力神)</managingEditor><webMaster>1045772673@qq.com (马力神)</webMaster><lastBuildDate>Wed, 19 May 2021 20:14:40 +0800</lastBuildDate><atom:link href="http://example.org/categories/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/" rel="self" type="application/rss+xml"/><item><title>设计模式-单例模式</title><link>http://example.org/design-pattern-singleton/</link><pubDate>Wed, 19 May 2021 20:14:40 +0800</pubDate><author>作者</author><guid>http://example.org/design-pattern-singleton/</guid><description><![CDATA[单例模型 定义 单例（Singleton）模式的定义：指一个类只有一个实例，且该类能自行创建这个实例的一种模式。例如，Windows 中只能打开一个任务管理器，这样可以避免因打开多个任务管理器窗口而造成内存资源的浪费，或出现各个窗口显示内容的不一致等错误。
在计算机系统中，还有 Windows 的回收站、操作系统中的文件系统、多线程中的线程池、显卡的驱动程序对象、打印机的后台处理服务、应用程序的日志对象、数据库的连接池、网站的计数器、Web 应用的配置对象、应用程序中的对话框、系统中的缓存等常常被设计成单例。
单例模式在现实生活中的应用也非常广泛，例如公司 CEO、部门经理等都属于单例模型。J2EE 标准中的 ServletContext 和 ServletContextConfig、Spring框架应用中的 ApplicationContext、数据库中的连接池等也都是单例模式。
单例模式有 3 个特点：
 单例类只有一个实例对象； 该单例对象必须由单例类自行创建； 单例类对外提供一个访问该单例的全局访问点。  优缺点 单例模式的优点：
单例模式可以保证内存里只有一个实例，减少了内存的开销。 可以避免对资源的多重占用。 单例模式设置全局访问点，可以优化和共享资源的访问。 单例模式的缺点：
单例模式一般没有接口，扩展困难。如果要扩展，则除了修改原来的代码，没有第二种途径，违背开闭原则。 在并发测试中，单例模式不利于代码调试。在调试过程中，如果单例中的代码没有执行完，也不能模拟生成一个新的对象。 单例模式的功能代码通常写在一个类中，如果功能设计不合理，则很容易违背单一职责原则。
应用场景 单例模式的应用场景主要有以下几个方面:
 需要频繁创建的一些类，使用单例可以降低系统的内存压力，减少 GC。 某类只要求生成一个对象的时候，如一个班中的班长、每个人的身份证号等。 某些类创建实例时占用资源较多，或实例化耗时较长，且经常使用。 某类需要频繁实例化，而创建的对象又频繁被销毁的时候，如多线程的线程池、网络连接池等。 频繁访问数据库或文件的对象。 对于一些控制硬件级别的操作，或者从系统上来讲应当是单一控制逻辑的操作，如果有多个实例，则系统会完全乱套。 当对象需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，并加快对象访问速度。如 Web 中的配置对象、数据库的连接池等。  Go语言实现 单例对象定义:
1 2 3  type Singleton struct { name string }    饿汉式  不管三七二十一，在程序启动时就创建好，故称 &ldquo;饿汉&rdquo;，简单粗暴。
1 2 3 4 5 6 7 8 9 10  var singletonHungry *Singleton // 通过 go 的 init 函数侵入 func init() { singletonHungry = &amp;Singleton{name: &#34;hungry&#34;} } func GetInstanceHungry() *Singleton { return singletonHungry }   懒汉式  与饿汉式不同，此时不在程序启动时创建，而是将初始化延迟到第一次使用的时候，即懒加载。]]></description></item><item><title>Concurrency Patterns In Go</title><link>http://example.org/concurrency/</link><pubDate>Sun, 10 Jan 2021 23:27:01 +0800</pubDate><author>作者</author><guid>http://example.org/concurrency/</guid><description>什么是并发编程 并发 concurrency 是一种设计：
将程序设计成一个包含许多独立过程的集合； 允许这些过程最终可以并行 parallel 地去执行； 尽管 并发 并不要求必须同时运行，例如在单核 CPU 物理机上无法实现并行却可以依靠操作系统时间片轮转等调度来实现并发； 并发是一种操作系统在时间维度的虚拟，即时分复用。
代码运行的结果总是相同，无论是以并行还是顺序的方式。 具体要求 通过划分多个独立的任务来将代码以及数据分组 没有竞争条件1 没有死锁2 比常规的程序更有效，即执行更快 Go如何并发 Don&amp;rsquo;t communicate by sharing memory; share memory by communicating. (R. Pike)
不要通过共享内存来通信，这意味着不同的并发实体不应该通过遵守严格、容易出错的内存可见性和同步策略 (比如内存屏障3)来进行通信 (这是可以做到的，但是会让情况变得复杂，而且由于数据竞争会造成不可预期的结果)。
应该通过通信来共享内存 (数据) : Go 使用了基于 CSP4 (Communicating Sequential Process，通信顺序程序) 的并发模型，goroutine 做为并发通信的实体，通过 channel 来实现数据共享。
A send on a channel happens before the corresponding receive from that channel completes.</description></item></channel></rss>